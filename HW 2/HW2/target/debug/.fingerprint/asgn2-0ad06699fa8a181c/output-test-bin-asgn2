{"message":"expected tuple struct or tuple variant, found enum `Expr`","code":{"code":"E0532","explanation":"Pattern arm did not match expected kind.\n\nErroneous code example:\n\n```compile_fail,E0532\nenum State {\n    Succeeded,\n    Failed(String),\n}\n\nfn print_on_failure(state: &State) {\n    match *state {\n        // error: expected unit struct, unit variant or constant, found tuple\n        //        variant `State::Failed`\n        State::Failed => println!(\"Failed\"),\n        _ => ()\n    }\n}\n```\n\nTo fix this error, ensure the match arm kind is the same as the expression\nmatched.\n\nFixed example:\n\n```\nenum State {\n    Succeeded,\n    Failed(String),\n}\n\nfn print_on_failure(state: &State) {\n    match *state {\n        State::Failed(ref msg) => println!(\"Failed with {}\", msg),\n        _ => ()\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\asgn2.rs","byte_start":5666,"byte_end":5670,"line_start":152,"line_end":152,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"        if let Expr(fractional) = f {","highlight_start":16,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the enum is defined here","code":null,"level":"note","spans":[{"file_name":"src\\asgn2.rs","byte_start":1089,"byte_end":1309,"line_start":30,"line_end":38,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub enum Expr {","highlight_start":1,"highlight_end":16},{"text":"    Id(String),","highlight_start":1,"highlight_end":16},{"text":"    Numeral(f64),","highlight_start":1,"highlight_end":18},{"text":"    Times(Box<Expr>, Box<Expr>),","highlight_start":1,"highlight_end":33},{"text":"    Plus(Box<Expr>, Box<Expr>),","highlight_start":1,"highlight_end":32},{"text":"    Minus(Box<Expr>, Box<Expr>),","highlight_start":1,"highlight_end":33},{"text":"    Let(Box<Decl>, Box<Expr>),","highlight_start":1,"highlight_end":31},{"text":"    FunCall(String, Vec<Expr>),","highlight_start":1,"highlight_end":32},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try to match against one of the enum's variants","code":null,"level":"help","spans":[{"file_name":"src\\asgn2.rs","byte_start":5666,"byte_end":5670,"line_start":152,"line_end":152,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"        if let Expr(fractional) = f {","highlight_start":16,"highlight_end":20}],"label":null,"suggested_replacement":"ex::FunCall","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\asgn2.rs","byte_start":5666,"byte_end":5670,"line_start":152,"line_end":152,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"        if let Expr(fractional) = f {","highlight_start":16,"highlight_end":20}],"label":null,"suggested_replacement":"ex::Id","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\asgn2.rs","byte_start":5666,"byte_end":5670,"line_start":152,"line_end":152,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"        if let Expr(fractional) = f {","highlight_start":16,"highlight_end":20}],"label":null,"suggested_replacement":"ex::Let","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\asgn2.rs","byte_start":5666,"byte_end":5670,"line_start":152,"line_end":152,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"        if let Expr(fractional) = f {","highlight_start":16,"highlight_end":20}],"label":null,"suggested_replacement":"ex::Minus","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\asgn2.rs","byte_start":5666,"byte_end":5670,"line_start":152,"line_end":152,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"        if let Expr(fractional) = f {","highlight_start":16,"highlight_end":20}],"label":null,"suggested_replacement":"ex::Numeral","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\asgn2.rs","byte_start":5666,"byte_end":5670,"line_start":152,"line_end":152,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"        if let Expr(fractional) = f {","highlight_start":16,"highlight_end":20}],"label":null,"suggested_replacement":"ex::Plus","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\asgn2.rs","byte_start":5666,"byte_end":5670,"line_start":152,"line_end":152,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"        if let Expr(fractional) = f {","highlight_start":16,"highlight_end":20}],"label":null,"suggested_replacement":"ex::Times","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0532]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected tuple struct or tuple variant, found enum `Expr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\asgn2.rs:152:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Expr(fractional) = f {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the enum is defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\asgn2.rs:30:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Expr {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m31\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Id(String),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Numeral(f64),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Times(Box<Expr>, Box<Expr>),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    FunCall(String, Vec<Expr>),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try to match against one of the enum's variants\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        if let \u001b[0m\u001b[0m\u001b[38;5;10mex::FunCall\u001b[0m\u001b[0m(fractional) = f {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        if let \u001b[0m\u001b[0m\u001b[38;5;10mex::Id\u001b[0m\u001b[0m(fractional) = f {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        if let \u001b[0m\u001b[0m\u001b[38;5;10mex::Let\u001b[0m\u001b[0m(fractional) = f {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        if let \u001b[0m\u001b[0m\u001b[38;5;10mex::Minus\u001b[0m\u001b[0m(fractional) = f {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~\u001b[0m\n\u001b[0m      and 3 other candidates\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0532`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0532`.\u001b[0m\n"}
